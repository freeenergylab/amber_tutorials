#!/usr/bin/env python
# coding: utf-8


import numpy as np
import parmed as pmd 
from parmed.amber import AmberParm
import argparse
import sys
import numpy as np


def Check(Path):
    try:
        with open(Path,"r") as file:
            print("is reading the Top File \n")
    except FileNotFoundError:
        print("File does not exist !!!\n")
        sys.exit(1)
        
    Top = AmberParm(Path)
    if "ATP" not in Top.parm_data["RESIDUE_LABEL"] and "GTP" not in Top.parm_data["RESIDUE_LABEL"]:
        print("ATP/GTP is Not in the TOP, SO NO Need Modification !!!\n")
        sys.exit(1)

    if "ATP" in Top.parm_data["RESIDUE_LABEL"]:
        name = "ATP"
    if "GTP" in Top.parm_data["RESIDUE_LABEL"]:
        name = "GTP"

    if name == "ATP":
        cmap_name = ["O3B","PB","O3A","PA","O5*"]
        index = []
        residues = [residue for residue in Top.residues if residue.name == "ATP"]
        for residue in residues:
            temp = []
            atom_name = [atom.name for atom in residue.atoms]
            atom = [atom for atom in residue.atoms]
            for i in cmap_name:
                if i not in atom_name:
                    print("Use the Standard Amber Force Field Parameter File !!!\n")
                    sys.exit(1)
                else:
                    temp2 = atom[atom_name.index(i)].idx
                    temp.append(temp2 + 1)
            index.append(temp)

    if name == "GTP":
        cmap_name = ["O3B","PB","O3A","PA","O5'"]
        index = []
        residues = [residue for residue in top.residues if residue.name == "ATP"]
        for residue in residues:
            temp = []
            atom_name = [atom.name for atom in residue.atoms]
            atom = [atom for atom in residue.atoms]
            for i in cmap_name:
                if i not in atom_name:
                    print("Use the Standard Amber Force Field Parameter File !!!\n")
                    sys.exit(1)
                else:
                    temp2 = atom[atom_name.index(i)].idx
                    temp.append(temp2 + 1)
            index.append(temp)


    return name, index


def Gen_cmap(Path, name, index, method, dis_cmap=False):
    cmap_matrix_HF = [
          0.73916,   0.77858,   0.49480,   0.06713,  -0.42882,  -0.86487,  -1.24533,  -1.38526,  -1.49718,  -1.57181,
         -1.56175,  -1.50235,  -1.33099,  -0.99370,  -0.76832,  -0.59390,  -0.60448,  -0.63162,  -0.75357,  -0.64685,
         -0.40829,  -0.11662,   0.24376,   0.48945,   0.47064,   0.31550,   0.02478,  -0.29102,  -0.74444,  -1.12396,
         -1.49851,  -1.76726,  -2.09688,  -2.25917,  -2.17017,  -1.95334,  -1.63791,  -1.23919,  -0.97912,  -0.80136,
         -0.85260,  -1.01357,  -0.88629,  -0.68737,  -0.39753,  -0.05912,   0.25602,   0.49614,  -0.22702,  -0.37979,
         -0.58346,  -0.86088,  -1.14345,  -1.51802,  -1.98825,  -2.45858,  -2.87772,  -2.93814,  -2.82438,  -2.43629,
         -1.97040,  -1.56838,  -1.36369,  -1.29911,  -1.31453,  -1.33419,  -1.21938,  -0.98024,  -0.60079,  -0.33088,
         -0.18771,  -0.08031,  -1.13582,  -1.29209,  -1.40477,  -1.63907,  -1.93372,  -2.43578,  -3.07706,  -3.57197,
         -3.92571,  -3.90667,  -3.64529,  -3.14670,  -2.62716,  -2.30685,  -2.07634,  -1.95297,  -1.89485,  -1.82350,
         -1.55587,  -1.34338,  -1.10661,  -0.96760,  -0.97160,  -1.04832,  -2.23752,  -2.22742,  -2.27349,  -2.52612,
         -2.96175,  -3.67975,  -4.31835,  -4.91883,  -5.20844,  -5.05204,  -4.68799,  -4.21805,  -3.68973,  -3.29356,
         -2.89845,  -2.79669,  -2.55103,  -2.38651,  -2.21374,  -2.06759,  -2.05380,  -2.02006,  -2.10358,  -2.13523,
         -3.34068,  -3.30180,  -3.40354,  -3.78722,  -4.31256,  -5.02950,  -5.72672,  -6.22786,  -6.36757,  -6.16873,
         -5.78473,  -5.26598,  -4.69560,  -4.15730,  -3.74232,  -3.49437,  -3.31789,  -3.17835,  -3.09234,  -3.13219,
         -3.20905,  -3.35857,  -3.39984,  -3.41998,  -4.44418,  -4.42439,  -4.62743,  -5.05943,  -5.70352,  -6.46543,
         -7.08458,  -7.48597,  -7.57726,  -7.37214,  -6.90481,  -6.38448,  -5.64440,  -4.90188,  -4.52169,  -4.27846,
         -4.14079,  -4.10972,  -4.20597,  -4.39584,  -4.56979,  -4.60750,  -4.66830,  -4.57696,  -5.49198,  -5.60660,
         -5.93116,  -6.47448,  -7.17629,  -7.91549,  -8.46661,  -8.81869,  -8.85440,  -8.70806,  -8.17163,  -7.34553,
         -6.29938,  -5.60614,  -5.24959,  -5.03637,  -5.02511,  -5.09582,  -5.42902,  -5.71106,  -5.72725,  -5.84407,
         -5.73334,  -5.57560,  -6.57343,  -6.71154,  -7.16106,  -7.65550,  -8.36829,  -9.01420,  -9.53123,  -9.90067,
        -10.07626,  -9.83698,  -8.97657,  -7.68049,  -6.71602,  -6.24716,  -5.94645,  -5.75542,  -5.85237,  -6.19496,
         -6.53540,  -6.73908,  -6.84244,  -6.89989,  -6.77131,  -6.60301,  -7.46904,  -7.71027,  -8.17816,  -8.66465,
         -9.31539,  -9.96457, -10.57420, -11.00649, -11.12269, -10.52766,  -8.97635,  -7.70378,  -7.10697,  -6.58684,
         -6.33401,  -6.42242,  -6.70259,  -7.09593,  -7.45486,  -7.69535,  -7.75209,  -7.60341,  -7.54449,  -7.44350,
         -8.13653,  -8.49856,  -8.81959,  -9.34316,  -9.99222, -10.68056, -11.44676, -11.81062, -11.48278, -10.14557,
         -8.62790,  -8.01225,  -7.12164,  -6.80426,  -6.84228,  -7.04569,  -7.35182,  -7.69893,  -8.02547,  -8.22561,
         -8.24893,  -8.12552,  -8.05294,  -8.05752,  -8.50298,  -8.76452,  -9.11898,  -9.66387, -10.35337, -11.22632,
        -11.92556, -11.95957, -10.75814,  -9.41126,  -8.56858,  -7.53108,  -7.10099,  -7.10937,  -7.15048,  -7.37579,
         -7.70340,  -8.04770,  -8.27154,  -8.39868,  -8.40853,  -8.30626,  -8.36443,  -8.30835,  -8.46484,  -8.71088,
         -9.02709,  -9.61772, -10.36243, -11.13675, -11.45154, -10.93878,  -9.73658,  -8.96422,  -7.49225,  -6.74371,
         -7.08178,  -7.16452,  -7.09109,  -7.30038,  -7.71494,  -7.99319,  -8.22254,  -8.34293,  -8.34914,  -8.29361,
         -8.28380,  -8.34008,  -8.04413,  -8.20923,  -8.62610,  -9.18221,  -9.91629, -10.33406, -10.31666,  -9.64777,
         -8.87444,  -7.33385,  -6.16544,  -6.53169,  -6.79035,  -6.65729,  -6.86091,  -7.19642,  -7.44599,  -7.66948,
         -7.87119,  -7.93733,  -7.98996,  -7.96233,  -7.98336,  -7.99327,  -7.34102,  -7.50743,  -7.90080,  -8.45314,
         -8.99770,  -9.17971,  -8.91997,  -8.44423,  -7.09244,  -5.77623,  -5.83330,  -6.12696,  -6.10201,  -6.24371,
         -6.40745,  -6.60471,  -6.80723,  -6.95854,  -7.16430,  -7.30468,  -7.37986,  -7.36758,  -7.41335,  -7.28689,
         -6.35837,  -6.47501,  -6.85289,  -7.28446,  -7.61466,  -7.68038,  -7.28564,  -6.26798,  -5.23172,  -5.04233,
         -5.28245,  -5.39304,  -5.33843,  -5.50008,  -5.60755,  -5.73394,  -6.01144,  -6.17770,  -6.42760,  -6.62880,
         -6.67024,  -6.62881,  -6.52835,  -6.42377,  -5.32318,  -5.51027,  -5.79156,  -6.04520,  -6.20888,  -6.05028,
         -5.48036,  -4.66064,  -4.39691,  -4.56000,  -4.69743,  -4.76659,  -4.80270,  -4.76711,  -4.83397,  -4.89280,
         -5.10114,  -5.41918,  -5.73428,  -5.84248,  -5.75758,  -5.64511,  -5.48776,  -5.31493,  -4.23257,  -4.39692,
         -4.59182,  -4.68697,  -4.59663,  -4.25522,  -3.81027,  -3.65284,  -3.80535,  -4.11831,  -4.09253,  -4.09979,
         -4.03603,  -3.93544,  -3.97929,  -4.07797,  -4.38291,  -4.68470,  -4.87820,  -4.91023,  -4.71334,  -4.54818,
         -4.34062,  -4.23566,  -3.29979,  -3.32849,  -3.33528,  -3.26076,  -3.04779,  -2.81491,  -2.78516,  -2.98039,
         -3.32615,  -3.55022,  -3.47414,  -3.36148,  -3.21459,  -3.08920,  -3.12242,  -3.30965,  -3.66827,  -3.93822,
         -3.98757,  -3.87242,  -3.65998,  -3.48861,  -3.32414,  -3.29441,  -2.36059,  -2.29302,  -2.18873,  -1.96388,
         -1.81027,  -1.84216,  -2.15267,  -2.61853,  -2.97172,  -3.06725,  -2.92579,  -2.70870,  -2.50673,  -2.40048,
         -2.48658,  -2.71955,  -2.99312,  -3.15299,  -3.00679,  -2.84349,  -2.65126,  -2.49562,  -2.46578,  -2.40341,
         -1.50270,  -1.22203,  -0.94327,  -0.82629,  -0.83460,  -1.27290,  -1.69175,  -2.17796,  -2.47738,  -2.47648,
         -2.19751,  -2.00383,  -1.87735,  -1.89017,  -1.99025,  -2.22688,  -2.35860,  -2.38036,  -2.22321,  -1.96219,
         -1.87650,  -1.76044,  -1.65363,  -1.61028,  -0.59467,  -0.21897,   0.01537,  -0.02109,  -0.42258,  -0.84864,
         -1.46067,  -1.90065,  -2.06633,  -1.96449,  -1.72417,  -1.50174,  -1.37577,  -1.41972,  -1.60040,  -1.69866,
         -1.68197,  -1.64065,  -1.38041,  -1.33740,  -1.24562,  -1.11182,  -1.03324,  -0.89872,   0.10120,   0.38565,
          0.54025,   0.28791,  -0.12974,  -0.74562,  -1.18732,  -1.51962,  -1.58985,  -1.46726,  -1.32290,  -1.16861,
         -1.05561,  -1.14723,  -1.26775,  -1.16800,  -1.01804,  -0.97599,  -0.95672,  -0.86496,  -0.83738,  -0.82152,
         -0.54056,  -0.24290,   0.64835,   0.84045,   0.64952,   0.30143,  -0.18275,  -0.72953,  -1.20563,  -1.38197,
         -1.39807,  -1.33319,  -1.33957,  -1.17227,  -1.19217,  -1.05675,  -0.98305,  -0.81580,  -0.65302,  -0.62752,
         -0.70671,  -0.74862,  -0.61184,  -0.36300,  -0.10642,   0.36827 
    ]
    cmap_matrix_B3 = [
          0.61226,   0.59518,   0.28830,  -0.13617,  -0.56402,  -0.90927,  -1.18563,  -1.18906,  -1.22458,  -1.28971,
         -1.42695,  -1.65245,  -1.81509,  -1.75290,  -1.71202,  -1.60310,  -1.58378,  -1.48432,  -1.38747,  -1.05215,
         -0.60079,  -0.18482,   0.22556,   0.43365,   0.32834,   0.09940,  -0.24172,  -0.56642,  -0.97704,  -1.27416,
         -1.52011,  -1.63946,  -1.87118,  -2.03157,  -2.10437,  -2.13654,  -2.06661,  -1.85199,  -1.72112,  -1.60836,
         -1.64360,  -1.72647,  -1.42839,  -1.05927,  -0.59843,  -0.15712,   0.20512,   0.42264,  -0.13962,  -0.39129,
         -0.67406,  -1.00258,  -1.26255,  -1.51232,  -1.80745,  -2.10048,  -2.40802,  -2.47774,  -2.50148,  -2.27809,
         -1.97170,  -1.70778,  -1.62849,  -1.68081,  -1.74933,  -1.71019,  -1.46448,  -1.07444,  -0.53539,  -0.16918,
          0.00199,   0.08369,  -0.60812,  -0.88159,  -1.09977,  -1.38377,  -1.62612,  -1.97558,  -2.42446,  -2.69927,
         -2.94131,  -2.92177,  -2.72099,  -2.29850,  -1.87706,  -1.71885,  -1.69424,  -1.75857,  -1.78705,  -1.68860,
         -1.28187,  -0.91848,  -0.55831,  -0.31550,  -0.27490,  -0.40882,  -1.06182,  -1.19832,  -1.36979,  -1.63472,
         -1.96835,  -2.50925,  -2.88985,  -3.28213,  -3.43554,  -3.22084,  -2.84649,  -2.40255,  -1.98763,  -1.85516,
         -1.76295,  -1.89559,  -1.71903,  -1.49751,  -1.19734,  -0.89019,  -0.74050,  -0.61016,  -0.67468,  -0.81723,
         -1.37448,  -1.51390,  -1.69444,  -2.04782,  -2.44346,  -2.92250,  -3.33482,  -3.62206,  -3.58857,  -3.26053,
         -2.78643,  -2.31738,  -2.00030,  -1.85910,  -1.80552,  -1.72437,  -1.57479,  -1.34785,  -1.10844,  -0.99329,
         -0.96385,  -1.06077,  -1.16584,  -1.29878,  -1.65548,  -1.75929,  -2.01613,  -2.36543,  -2.82402,  -3.30513,
         -3.66038,  -3.79537,  -3.63656,  -3.23924,  -2.68491,  -2.37058,  -2.07490,  -1.80768,  -1.70299,  -1.54096,
         -1.35309,  -1.20702,  -1.15907,  -1.22514,  -1.33919,  -1.40620,  -1.56660,  -1.61796,  -1.85998,  -2.04820,
         -2.35706,  -2.77798,  -3.24899,  -3.73399,  -3.97371,  -3.97529,  -3.68120,  -3.34396,  -2.88513,  -2.48873,
         -2.03558,  -1.72374,  -1.44989,  -1.20837,  -1.10811,  -1.09132,  -1.34022,  -1.58536,  -1.59835,  -1.80287,
         -1.82594,  -1.81980,  -2.15933,  -2.30134,  -2.67646,  -3.01450,  -3.49479,  -3.82950,  -3.98863,  -3.93377,
         -3.74066,  -3.41328,  -2.93707,  -2.32869,  -1.81742,  -1.47516,  -1.13565,  -0.88382,  -0.91637,  -1.22816,
         -1.58600,  -1.83068,  -2.03224,  -2.19509,  -2.18781,  -2.11741,  -2.36444,  -2.56687,  -2.93886,  -3.23315,
         -3.63159,  -3.92027,  -4.06250,  -4.00919,  -3.85959,  -3.51476,  -2.68365,  -1.98038,  -1.48657,  -0.96134,
         -0.63881,  -0.69242,  -0.97849,  -1.43933,  -1.92976,  -2.31555,  -2.48589,  -2.42861,  -2.42369,  -2.34760,
         -2.52003,  -2.79816,  -3.02579,  -3.34786,  -3.66752,  -3.90386,  -4.12686,  -4.09562,  -3.82738,  -3.12627,
         -2.20490,  -1.73645,  -0.89554,  -0.55906,  -0.50878,  -0.73639,  -1.17902,  -1.73903,  -2.25547,  -2.63851,
         -2.75303,  -2.64012,  -2.56294,  -2.50482,  -2.62308,  -2.78202,  -2.99438,  -3.29607,  -3.59137,  -3.93652,
         -4.16926,  -4.07567,  -3.28194,  -2.47346,  -1.85918,  -1.00118,  -0.63539,  -0.47827,  -0.49418,  -0.86739,
         -1.49800,  -2.15030,  -2.62254,  -2.88008,  -2.89593,  -2.72516,  -2.68613,  -2.51495,  -2.54134,  -2.65628,
         -2.80499,  -3.09622,  -3.39633,  -3.70295,  -3.74034,  -3.36968,  -2.51568,  -2.04772,  -0.92365,  -0.33571,
         -0.44058,  -0.40062,  -0.47469,  -1.04578,  -1.86054,  -2.47729,  -2.90304,  -3.08053,  -3.00114,  -2.78791,
         -2.61050,  -2.52808,  -2.27483,  -2.30983,  -2.52080,  -2.73111,  -3.05829,  -3.13236,  -3.02536,  -2.49967,
         -1.97114,  -0.92125,  -0.00854,  -0.10989,  -0.14475,  -0.11309,  -0.69081,  -1.50842,  -2.18639,  -2.71378,
         -3.02859,  -3.04083,  -2.94116,  -2.69933,  -2.50276,  -2.34657,  -1.91892,  -1.93313,  -2.09900,  -2.33104,
         -2.53930,  -2.49231,  -2.19347,  -1.89513,  -0.98374,  -0.00323,   0.18090,   0.18474,   0.17739,  -0.31181,
         -0.99995,  -1.69801,  -2.26143,  -2.63154,  -2.86670,  -2.88088,  -2.72626,  -2.45278,  -2.27185,  -1.98929,
         -1.40097,  -1.35221,  -1.50339,  -1.67926,  -1.75306,  -1.65308,  -1.32594,  -0.64998,   0.09048,   0.49287,
          0.54795,   0.46096,   0.22607,  -0.42978,  -1.04905,  -1.61844,  -2.19094,  -2.48580,  -2.68400,  -2.70360,
         -2.46274,  -2.17651,  -1.86355,  -1.58307,  -0.92338,  -0.96017,  -1.04166,  -1.08860,  -1.09298,  -0.90138,
         -0.50776,   0.12326,   0.53649,   0.64900,   0.61947,   0.33761,  -0.12390,  -0.57601,  -1.12237,  -1.54110,
         -1.96704,  -2.35858,  -2.57678,  -2.43678,  -2.11418,  -1.75141,  -1.37796,  -1.05733,  -0.44097,  -0.46882,
         -0.52712,  -0.50567,  -0.36743,  -0.08882,   0.29393,   0.56246,   0.68545,   0.50869,   0.43057,   0.10181,
         -0.25003,  -0.58274,  -1.01219,  -1.40987,  -1.92791,  -2.26300,  -2.32480,  -2.15023,  -1.69094,  -1.29548,
         -0.87562,  -0.59326,  -0.14049,  -0.07049,  -0.00018,   0.08524,   0.29541,   0.50869,   0.66374,   0.71261,
          0.54485,   0.32488,   0.19486,  -0.01468,  -0.21469,  -0.45240,  -0.84752,  -1.33545,  -1.88097,  -2.15672,
         -2.09347,  -1.76132,  -1.29138,  -0.86121,  -0.48894,  -0.26931,   0.14551,   0.23908,   0.33667,   0.54032,
          0.69943,   0.78034,   0.67773,   0.44417,   0.15328,  -0.01705,  -0.07079,  -0.11110,  -0.19833,  -0.46068,
         -0.90308,  -1.46665,  -1.91352,  -2.05729,  -1.77809,  -1.39069,  -0.89446,  -0.48572,  -0.19008,  -0.00621,
          0.32350,   0.58067,   0.80343,   0.89061,   0.95300,   0.69450,   0.48325,   0.16204,  -0.10818,  -0.19228,
         -0.07101,  -0.07093,  -0.25515,  -0.66217,  -1.15495,  -1.69018,  -1.94790,  -1.95856,  -1.63291,  -1.09339,
         -0.70490,  -0.31474,   0.02497,   0.19232,   0.57293,   0.87573,   1.04927,   1.02511,   0.74972,   0.49536,
          0.08993,  -0.27865,  -0.42353,  -0.36989,  -0.23407,  -0.22184,  -0.44277,  -0.90362,  -1.45800,  -1.82366,
         -1.90637,  -1.78565,  -1.31971,  -0.97620,  -0.59052,  -0.17342,   0.08406,   0.31018,   0.68900,   0.89365,
          1.00885,   0.79511,   0.48276,   0.03988,  -0.27262,  -0.53982,  -0.56315,  -0.46106,  -0.41510,  -0.50141,
         -0.76141,  -1.26413,  -1.72465,  -1.82400,  -1.71024,  -1.55209,  -1.28652,  -0.89356,  -0.56708,  -0.33062,
          0.08754,   0.42010,   0.78475,   0.92005,   0.67912,   0.37933,  -0.00925,  -0.44333,  -0.79723,  -0.89687,
         -0.84367,  -0.76739,  -0.92047,  -0.99367,  -1.41057,  -1.64405,  -1.81915,  -1.78860,  -1.59502,  -1.43262,
         -1.27281,  -1.04172,  -0.63414,  -0.20750,   0.10428,   0.58527
    ]

    Top = AmberParm(Path)
    if not dis_cmap:
        index = np.array(index)
        shape = index.shape
        if method == "HF":
            cmap_matrix = cmap_matrix_HF
        if method == "B3LYP":
            cmap_matrix = cmap_matrix_B3
        if "CMAP_COUNT" in [key for key, value in Top.parm_comments.items()]:
            last = Top.parm_data["CMAP_COUNT"][1]
            Top.parm_data["CMAP_COUNT"][0] += shape([0])
            Top.parm_data["CMAP_COUNT"][1] += 1
            Top.parm_data["CMAP_RESOLUTION"].append(24)
            for m in range(shape[0]):
                Top.parm_data["CMAP_INDEX"].append(index[m][0])
                Top.parm_data["CMAP_INDEX"].append(index[m][1])
                Top.parm_data["CMAP_INDEX"].append(index[m][2])
                Top.parm_data["CMAP_INDEX"].append(index[m][3])
                Top.parm_data["CMAP_INDEX"].append(index[m][4])
                Top.parm_data["CMAP_INDEX"].append(last+1)


            if last < 9:
                Top.add_flag(flag_name = "CMAP_PARAMETER_0{i}".format(i=last+1), flag_format = "8F9.5",data=cmap_matrix,comments=["{ATP} CMAP".format(ATP=name)])
            else:
                Top.add_flag(flag_name = "CMAP_PARAMETER_{i}".format(i=last+1), flag_format = "8F9.5",data=cmap_matrix,comments=["{ATP} CMAP".format(ATP=name)])

                Top.flag_list[-2], Top.flag_list[-1] = Top.flag_list[-1], Top.flag_list[-2]
                
            
            
        else:
            Top.add_flag(flag_name = "CMAP_COUNT", flag_format = "2I8",data=[shape[0],1])
            Top.add_flag(flag_name = "CMAP_RESOLUTION", flag_format = "20I4",data=[24])
            Top.add_flag(flag_name = "CMAP_PARAMETER_01", flag_format = "8F9.5",data=cmap_matrix,comments=["{ATP} CMAP".format(ATP=name)])
            for m in range(shape[0]):
                Top.add_flag(flag_name = "CMAP_INDEX", flag_format = "6I8",data=[index[m][0],index[m][1],index[m][2],index[m][3],index[m][4],1])
            
        
    return Top




def Modify_lj(Top):
       
    if "MG" not in Top.parm_data["RESIDUE_LABEL"]:
        print("MG is Not in the TOP, SO NO Need Futher Modification !!!\n")
        sys.exit(1)
    
    modify_atom = {
        "O3":{
            "c12":55958.78,
            "c6":69.26
        },
        "P":{
            "c12":133097.78,
            "c6":154.94
        },
        "OS":{
            "c12":26407.56,
            "c6":66.18
        },
        "O2":{
            "c12":55958.78,
            "c6":69.26
        },
        "OY":{
            "c12":26407.56,
            "c6":66.18
        }
    }
    
    for atom, LJ in modify_atom.items():
        temp = Top.parm_data["AMBER_ATOM_TYPE"].index(atom)
        temp_2 = Top.parm_data["AMBER_ATOM_TYPE"].index("Mg2+")
        temp = Top.parm_data["ATOM_TYPE_INDEX"][temp]
        temp_2 = Top.parm_data["ATOM_TYPE_INDEX"][temp_2]
        index = (temp_2 - 1)* Top.parm_data["POINTERS"][1] + temp
        index = Top.parm_data["NONBONDED_PARM_INDEX"][index-1]
        Top.parm_data["LENNARD_JONES_ACOEF"][index -1] = LJ["c12"]
        Top.parm_data["LENNARD_JONES_BCOEF"][index -1] = LJ["c6"]
    
    return Top



def main():
    parser = argparse.ArgumentParser(description="This is a Python script for modifying the TOP file containing ATP/GTP-Mg2+")
    parser.add_argument("-dis_cmap", choices=[True,False],default=False, help="Whether to enable CMAP")
    parser.add_argument("-top", type=str, required=True, help="Path of The Top File!!")
    parser.add_argument("-out", type=str, required=True, help="The Output Name!!")
    parser.add_argument("-method", type=str, required=True, help="Chooce HF or B3LYP!!")
    args = parser.parse_args()
    dis_cmap = args.dis_cmap
    path = args.top
    out_name = args.out
    method = args.method.upper()
    if method not in ["HF", "B3LYP"]:
        print("Only HF or B3LYP!!\n")
        sys.exit(1)
    name, index = Check(Path=path)
    top = Gen_cmap(Path=path, name=name, index=index, method=method, dis_cmap=dis_cmap)
    top = Modify_lj(top)
    top.write_parm(out_name)    



if __name__== "__main__":
    main()

